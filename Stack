#include <iostream>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cstdlib>
#include <stack>
using namespace std;
#define SIZE 5;
// class Stack
// {
// public:
//     int arr[SIZE];
//     int top;

//     Stack()
//     {
//         top = -1;
//     }
//     void push(int value)
//     {
//         if (top == SIZE - 1)
//         {
//             cout << "Stack overflow" << endl;
//             return;
//         }
//         arr[++top] = value;
//         cout << "Pushed: " << value << endl;
//     }
//     void pop()
//     {
//         if (top == -1)
//         {
//             cout << "Stack is empty" << endl;
//             return;
//         }
//         cout << "Popped: " << arr[top] << endl;
//         top--;
//     }
//     void display()
//     {
//         if (top == -1)
//         {
//             cout << "Stack is empty" << endl;
//             return;
//         }
//         cout << "Stack element:";
//         for (int i = top; i >= 0; i--)
//         {
//             cout << arr[i] << " ";
//         }
//         cout << endl;
//     }
// };
// void hello(int n)
// {
//     if (n == 0)
//     {
//         return;
//     }
//     cout << "Hello " << n << endl;
//     hello(n - 1);
// }
stack<int> copyStack(stack<int> &input){
    stack<int> temp;
    while(not input.empty()){
        int curr= input.top();
        input.pop();
        temp.push(curr);
}
stack<int> result;
while(not temp.empty()){
    int curr= temp.top();
    temp.pop();
    result.push(curr);
}
return result;
}
void f(stack<int> &st,stack<int> &result){
 if(st.empty()){ 
    return;  
}

int curr = st.top();
st.pop();

f(st,result);
result.push(curr);
}
void insertAtBottom(stack<int> &st,int val){
    stack<int> temp;
    while(not st.empty()){
        int curr= st.top();
        st.pop();
        temp.push(curr);
    }
    st.push(val); //puch at the bottom 
    while(temp.empty()){
        int cur= temp.top();
        temp.pop();
        st.push(cur);
    }

}
void insertAtBottomUsingRecursion(stack<int> &st, int x){
    // base case
    if(st.empty()){
        st.push(x);
        return;
    }
    int curr= st.top();
    st.pop();
    insertAtBottomUsingRecursion(st,x);
    st.push(curr);
}
void insertAtBottomUsingRecursionAtAnyIndex(stack<int> &st, int x,int index){
// base case 

}
void removeFromBottom(stack<int> &st){
    stack<int> temp;
    if(st.empty()){
        return;
    }

    while(st.size()>1){
        int curr= st.top();
        st.pop();
        temp.push(curr);
    }
    st.pop();
    // copying from temp to st
    while(temp.empty()){
        int curr= temp.top();
        temp.pop();
        st.push(curr);
    }
}
void removeFromBottomUsingRecursion(stack<int> &st){
    // base case
    if(st.size()==1){
        st.pop();
        return;
    }
    int curr= st.top();
    st.pop();
    removeFromBottomUsingRecursion(st);
    st.push(curr);
}
void reverseStack(stack<int>& st){
    stack<int> temp;
    while(!st.empty()){
        int curr= st.top();
        st.pop();
        temp.push(curr);
    }
    // printing the reverse (temp) stack
    while(!temp.empty()){
        int curr= temp.top();
        cout<<curr<<" ";
        temp.pop();
    }
}
void reverseAStack(stack<int>& stack){
    // base case
    if(stack.empty()){
        return;
    }
    int curr= stack.top();
    stack.pop();
    reverseAStack(stack);
    // yeh kyu hai tum samaj gye hoge
    insertAtBottom(stack,curr);

}
int main()
{
    // stack data structure
    // What is stack?
    // A stack is a special tupe of data structures where elemenst are added and removed from the same en. It workd like a stack of plates- you can only add or remove the top one first
    // 2Ô∏è‚É£ What are the two main operations in a stack?
    // Puch(top add an elemenst ) and pop(to remove tge elemenst )
    // 3Ô∏è‚É£ Which data structure principle does a stack follow?
    // LIFO ->(last in first out) The last elemenst is added the first one remove
    // 4Ô∏è‚É£ What is the time complexity of push and pop operations in a stack?
    // The time complexity of push and pop is o(1),meaning super fast
    // 5Ô∏è‚É£ Can a stack be implemented using an array?
    // Yes stack is implemented using array
    // 6Ô∏è‚É£ Write a simple C++ program to implement a stack using an array.
    // 7Ô∏è‚É£ How can a stack be implemented using a linked list?
    // Istead of array we can use linkedlist ,where each nodes contains a value and a pointer to nest node.The top of the stack is always the head of linkedlist.

    // 8Ô∏è‚É£ What happens when we try to pop an element from an empty stack?
    // the stack is empty , so there's nothing to remove .Thisis called stack underflow.

    // 9Ô∏è‚É£ What is stack overflow and underflow?
    // stack overflow happens when you push too many elemenst and exeed the stack size;
    // stack underflow happen ehrn you pop from an elemsnt an empty stack.

    // üîü How is a stack used in function calls (recursion)?
    // every function call is stored in a stack.wen a function finished ,it gets poped from the stack .This is how recursion works.

    //
#include <iostream>
#include<stack>
using namespace std;
void reverseString(string str){
    stack<char> s;
    for(char ch:str){
        s.push(ch);
    }
    while(!s.empty()){
        cout<<s.top();
        s.pop();
    }
}
class stack{
int arr[5];
int top;
public:
void push(int va){
    if(top==4){
        cout<<"overflow";
    }
    arr[++top]= va;
}
void pop(){
    if(top==-1){
        cout<<"underflow";
    }
  top--;
}
int getTop(){
    if(top ==-1){
        return -1;
    }
    return arr[top];
}

};
#define SIZE 5;
// class Stack
// {
// public:
//     int arr[SIZE];
//     int top;

//     Stack()
//     {
//         top = -1;
//     }
//     void push(int value)
//     {
//         if (top == SIZE - 1)
//         {
//             cout << "Stack overflow" << endl;
//             return;
//         }
//         arr[++top] = value;
//         cout << "Pushed: " << value << endl;
//     }
//     void pop()
//     {
//         if (top == -1)
//         {
//             cout << "Stack is empty" << endl;
//             return;
//         }
//         cout << "Popped: " << arr[top] << endl;
//         top--;
//     }
//     void display()
//     {
//         if (top == -1)
//         {
//             cout << "Stack is empty" << endl;
//             return;
//         }
//         cout << "Stack element:";
//         for (int i = top; i >= 0; i--)
//         {
//             cout << arr[i] << " ";
//         }
//         cout << endl;
//     }
// };
// void hello(int n)
// {
//     if (n == 0)
//     {
//         return;
//     }
//     cout << "Hello " << n << endl;
//     hello(n - 1);
// }
stack<int> copyStack(stack<int> &input){
    stack<int> temp;
    while(not input.empty()){
        int curr= input.top();
        input.pop();
        temp.push(curr);
}
stack<int> result;
while(not temp.empty()){
    int curr= temp.top();
    temp.pop();
    result.push(curr);
}
return result;
}
void f(stack<int> &st,stack<int> &result){
 if(st.empty()){ 
    return;  
}

int curr = st.top();
st.pop();

f(st,result);
result.push(curr);
}
void insertAtBottom(stack<int> &st,int val){
    stack<int> temp;
    while(not st.empty()){
        int curr= st.top();
        st.pop();
        temp.push(curr);
    }
    st.push(val); //puch at the bottom 
    while(temp.empty()){
        int cur= temp.top();
        temp.pop();
        st.push(cur);
    }

}
void insertAtBottomUsingRecursion(stack<int> &st, int x){
    // base case
    if(st.empty()){
        st.push(x);
        return;
    }
    int curr= st.top();
    st.pop();
    insertAtBottomUsingRecursion(st,x);
    st.push(curr);
}
void insertAtBottomUsingRecursionAtAnyIndex(stack<int> &st, int x,int index){
// base case 

}
void removeFromBottom(stack<int> &st){
    stack<int> temp;
    if(st.empty()){
        return;
    }

    while(st.size()>1){
        int curr= st.top();
        st.pop();
        temp.push(curr);
    }
    st.pop();
    // copying from temp to st
    while(temp.empty()){
        int curr= temp.top();
        temp.pop();
        st.push(curr);
    }
}
void removeFromBottomUsingRecursion(stack<int> &st){
    // base case
    if(st.size()==1){
        st.pop();
        return;
    }
    int curr= st.top();
    st.pop();
    removeFromBottomUsingRecursion(st);
    st.push(curr);
}
void reverseStack(stack<int>& st){
    stack<int> temp;
    while(!st.empty()){
        int curr= st.top();
        st.pop();
        temp.push(curr);
    }
    // printing the reverse (temp) stack
    while(!temp.empty()){
        int curr= temp.top();
        cout<<curr<<" ";
        temp.pop();
    }
}
void reverseAStack(stack<int>& stack){
    // base case
    if(stack.empty()){
        return;
    }
    int curr= stack.top();
    stack.pop();
    reverseAStack(stack);
    // yeh kyu hai tum samaj gye hoge
    insertAtBottom(stack,curr);

}
int main()
{
    // stack data structure
    // What is stack?
    // A stack is a special tupe of data structures where elemenst are added and removed from the same en. It workd like a stack of plates- you can only add or remove the top one first
    // 2Ô∏è‚É£ What are the two main operations in a stack?
    // Puch(top add an elemenst ) and pop(to remove tge elemenst )
    // 3Ô∏è‚É£ Which data structure principle does a stack follow?
    // LIFO ->(last in first out) The last elemenst is added the first one remove
    // 4Ô∏è‚É£ What is the time complexity of push and pop operations in a stack?
    // The time complexity of push and pop is o(1),meaning super fast
    // 5Ô∏è‚É£ Can a stack be implemented using an array?
    // Yes stack is implemented using array
    // 6Ô∏è‚É£ Write a simple C++ program to implement a stack using an array.
    // 7Ô∏è‚É£ How can a stack be implemented using a linked list?
    // Istead of array we can use linkedlist ,where each nodes contains a value and a pointer to nest node.The top of the stack is always the head of linkedlist.

    // 8Ô∏è‚É£ What happens when we try to pop an element from an empty stack?
    // the stack is empty , so there's nothing to remove .Thisis called stack underflow.

    // 9Ô∏è‚É£ What is stack overflow and underflow?
    // stack overflow happens when you push too many elemenst and exeed the stack size;
    // stack underflow happen ehrn you pop from an elemsnt an empty stack.

    // üîü How is a stack used in function calls (recursion)?
    // every function call is stored in a stack.wen a function finished ,it gets poped from the stack .This is how recursion works.

    //
    1Ô∏è‚É£ What is a stack?
    A stack is a linear data structure that follow the LIFO .This means the last eleemsnt is added is first to removed

2Ô∏è‚É£ What are the two main operations of a stack?
Push(),pop();
3Ô∏è‚É£ How do you create a stack using C++ STL?
stack<int> s;
s.push(10);
s.push(20);
s.push(30);
cout<<"Top elemest "<<s.top()<<endl;
s.pop();
cout<<"New top is eleemsnt of stack"<<s.top()<<endl;

}
// 4Ô∏è‚É£ How to check if a stack is empty?
if(s.empty()){
    cout<<"stack is empty"<<endl;
}
else{
    cout<<"stack is not empty"<<endl;
}
5Ô∏è‚É£ How to get the size of a stack?
cout<<"size of stack is "<<s.size()<<endl;
6Ô∏è‚É£ How do you implement a stack using an array?
7Ô∏è‚É£ What is the time complexity of push and pop operations in a stack?

Both push and pop operatation takes o(1).

8Ô∏è‚É£ How do you reverse a string using a stack?
9Ô∏è‚É£ How to print all elements in a stack?
stack<int> s;
s.push(1);
s.push(2);
s.push(3);
while(!s.empty()){
    cout<<s.top()<<" ";
    s.pop();
}
1Ô∏è‚É£ What is the full form of LIFO?
Last in last first out_of_range
2Ô∏è‚É£ What is the main purpose of a stack?
Stack is used  to managa ata in lifo (last in , first out).
3Ô∏è‚É£ What are the two main operations in a stack?
push,pop
4Ô∏è‚É£ How do you declare a stack in C++ using STL?
// #include <stack>
// stack<int> s;
5Ô∏è‚É£ How do you add an element to a stack in C++?
s.push(1);
6Ô∏è‚É£ How do you remove an element from a stack in C++?
s.pop()
7Ô∏è‚É£ How do you check the top element of a stack?
cout<<s.top()<<endl;
8Ô∏è‚É£ How do you check if a stack is empty?
if(s.empty()){
    cout<<"stack is empty!"<<endl;
}
else{
    cout<<"stack is not empty!"<<endl;
}
9Ô∏è‚É£ How do you check the size of a stack?
cout<<"size of stack is "<<s.size()<<endl;
üîü What happens when you pop an empty stack?
If you call pop() on empty stack ,it may cause an error or unbehabiour .
1Ô∏è‚É£ What is a stack?
A stack is a dtata strictr e ithat follow lifo
2Ô∏è‚É£ What does LIFO stand for?
Last in first out
3Ô∏è‚É£ How does a stack work?
The last element added is the forst one to be remove_const
4Ô∏è‚É£ What are the two main operations of a stack?
push,pop()
5Ô∏è‚É£ Is a stack FIFO or LIFO?
lifo.
6Ô∏è‚É£ Which data structure follows FIFO (First In, First Out)?
queue
7Ô∏è‚É£ What happens if you try to pop an empty stack?
stack underflow
8Ô∏è‚É£ What happens if you push an element into a full stack (fixed-size array)?
stack overflow
9Ô∏è‚É£ Where is a stack used in real life?
undo /rebind_allocback/forward ->webbrowser
call stack in programming

üîü Which function gives the top element of a stack in C++ STL?
s.top()
1Ô∏è‚É£1Ô∏è‚É£ How do you create an empty stack in C++?
stack<int> s;
1Ô∏è‚É£2Ô∏è‚É£ How do you add an element to a stack?
s.push(2);
1Ô∏è‚É£3Ô∏è‚É£ How do you remove an element from a stack?
cout<<S.top();
cout<<S.top();
1Ô∏è‚É£5Ô∏è‚É£ How do you check if a stack is empty?
if(s.empty()){
    cout<<"stack is empty!"<<endl;
}
else{

    cout<<"stack is not empty!"<<endl;
}
1Ô∏è‚É£6Ô∏è‚É£ How do you check the size of a stack?
cout<<s.size();
1Ô∏è‚É£7Ô∏è‚É£ What is the time complexity of push and pop operations?
o(1);
1Ô∏è‚É£8Ô∏è‚É£ Which header file is needed for using a stack in C++ STL?
#include<stack>
1Ô∏è‚É£9Ô∏è‚É£ Can a stack be implemented using an array?
yes
2Ô∏è‚É£0Ô∏è‚É£ Can a stack be implemented using a linked list?
yes
1Ô∏è‚É£ What is a stack?
A stack is a data structre follo wlifo
2Ô∏è‚É£ What is LIFO?
Last in forst out
3Ô∏è‚É£ What are the two main operations of a stack?
push,pop
4Ô∏è‚É£ Which operation removes an element from the stack?
pop()
5Ô∏è‚É£ Which operation adds an element to the stack?
push()
6Ô∏è‚É£ What is a "top" in a stack?
The top is the last added elemeent of the stack
7Ô∏è‚É£ What happens when you pop an empty stack?
underflow_errr
8Ô∏è‚É£ What happens when you push into a full stack (fixed size)?
overflow_error

9Ô∏è‚É£ Is a stack FIFO or LIFO?
lifo
üîü Which data structure follows FIFO (First In, First Out)?
queue
1Ô∏è‚É£1Ô∏è‚É£ Where is a stack used in real life?
undo m back ,forward , call stack in programming
1Ô∏è‚É£2Ô∏è‚É£ What data structure is used in recursion?
stack
1Ô∏è‚É£3Ô∏è‚É£ Which data structure is used in an "undo" operation?
stack to store previousoperation

1Ô∏è‚É£4Ô∏è‚É£ Which data structure is used in a web browser‚Äôs Back button?
stack to store previous pthread_attr_getschedparam
1Ô∏è‚É£5Ô∏è‚É£ Which data structure is used for evaluating expressions in programming?
stack->post/infix.
1Ô∏è‚É£6Ô∏è‚É£ Which header file is required for a stack in C++?
#include<stack>
1Ô∏è‚É£8Ô∏è‚É£ How do you add an element to a stack in C++?
s.push(2);
1Ô∏è‚É£9Ô∏è‚É£ How do you remove an element from a stack?
s.pop();
2Ô∏è‚É£0Ô∏è‚É£ How do you check the top element of a stack?
if(s.empty()){
    cout<<"Stack is empty";
}
2Ô∏è‚É£2Ô∏è‚É£ How do you find the size of a stack?
if(s.empty()){
    cout<<"stack us empty";
}
2Ô∏è‚É£2Ô∏è‚É£ How do you find the size of a stack?
cout<<s.size();
üìå Stack Time Complexity Questions
2Ô∏è‚É£3Ô∏è‚É£ What is the time complexity of push() in a stack?

o(1);
2Ô∏è‚É£4Ô∏è‚É£ What is the time complexity of pop() in a stack?
o(1)''2Ô∏è‚É£5Ô∏è‚É£ What is the time complexity of top() in a stack?
o(1);2Ô∏è‚É£6Ô∏è‚É£ What is the time complexity of checking if a stack is empty?
o(1)
2Ô∏è‚É£7Ô∏è‚É£ Can a stack be implemented using an array?
yes
2Ô∏è‚É£8Ô∏è‚É£ Can a stack be implemented using a linked list?
yes
2Ô∏è‚É£9Ô∏è‚É£ Which is better: Stack using an array or linked list?
array->faster but fixed size
linkedlist->slower , but flexible
3Ô∏è‚É£0Ô∏è‚É£ What is the advantage of using a linked list for a stack?
no size limit.
3Ô∏è‚É£1Ô∏è‚É£ What is the disadvantage of using a linked list for a stack?
uses extra momory for pointer.
üìå More Simple Stack Questions
3Ô∏è‚É£2Ô∏è‚É£ What happens when you push multiple elements into a stack?
the last elemenst is on top
3Ô∏è‚É£3Ô∏è‚É£ What happens when you pop multiple elements from a stack?
element is removed in reverse order 3Ô∏è‚É£4Ô∏è‚É£ What will be the output of this stack?
stack<int> s;
s.push(5);
s.push(6);
cout<<s.top();
3Ô∏è‚É£5Ô∏è‚É£ What will be the output after two pops?
cpp
Copy
Edit
stack<int> s;
s.push(5);
s.push(10);
s.pop();
cout<<s.top();
3Ô∏è‚É£6Ô∏è‚É£ What happens if you try to access top() of an empty stack?
stack<int> s;
s.push(1);
s.push(2);
s.push(3);
s.pop();
cout<<s.size();
3Ô∏è‚É£8Ô∏è‚É£ Which STL function removes all elements from a stack?
while(!s.empty()){
    s.pop();
}
3Ô∏è‚É£9Ô∏è‚É£ What will be the order of elements if we pop from a stack?
reverse __ORDER_BIG_ENDIAN__
4Ô∏è‚É£0Ô∏è‚É£ Can we traverse a stack without modifying it?
no becuase pop removes element parmanently
}
