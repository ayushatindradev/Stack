#include <iostream>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cstdlib>
#include <stack>
using namespace std;
#define SIZE 5;
// class Stack
// {
// public:
//     int arr[SIZE];
//     int top;

//     Stack()
//     {
//         top = -1;
//     }
//     void push(int value)
//     {
//         if (top == SIZE - 1)
//         {
//             cout << "Stack overflow" << endl;
//             return;
//         }
//         arr[++top] = value;
//         cout << "Pushed: " << value << endl;
//     }
//     void pop()
//     {
//         if (top == -1)
//         {
//             cout << "Stack is empty" << endl;
//             return;
//         }
//         cout << "Popped: " << arr[top] << endl;
//         top--;
//     }
//     void display()
//     {
//         if (top == -1)
//         {
//             cout << "Stack is empty" << endl;
//             return;
//         }
//         cout << "Stack element:";
//         for (int i = top; i >= 0; i--)
//         {
//             cout << arr[i] << " ";
//         }
//         cout << endl;
//     }
// };
// void hello(int n)
// {
//     if (n == 0)
//     {
//         return;
//     }
//     cout << "Hello " << n << endl;
//     hello(n - 1);
// }
stack<int> copyStack(stack<int> &input){
    stack<int> temp;
    while(not input.empty()){
        int curr= input.top();
        input.pop();
        temp.push(curr);
}
stack<int> result;
while(not temp.empty()){
    int curr= temp.top();
    temp.pop();
    result.push(curr);
}
return result;
}
void f(stack<int> &st,stack<int> &result){
 if(st.empty()){ 
    return;  
}

int curr = st.top();
st.pop();

f(st,result);
result.push(curr);
}
void insertAtBottom(stack<int> &st,int val){
    stack<int> temp;
    while(not st.empty()){
        int curr= st.top();
        st.pop();
        temp.push(curr);
    }
    st.push(val); //puch at the bottom 
    while(temp.empty()){
        int cur= temp.top();
        temp.pop();
        st.push(cur);
    }

}
void insertAtBottomUsingRecursion(stack<int> &st, int x){
    // base case
    if(st.empty()){
        st.push(x);
        return;
    }
    int curr= st.top();
    st.pop();
    insertAtBottomUsingRecursion(st,x);
    st.push(curr);
}
void insertAtBottomUsingRecursionAtAnyIndex(stack<int> &st, int x,int index){
// base case 

}
void removeFromBottom(stack<int> &st){
    stack<int> temp;
    if(st.empty()){
        return;
    }

    while(st.size()>1){
        int curr= st.top();
        st.pop();
        temp.push(curr);
    }
    st.pop();
    // copying from temp to st
    while(temp.empty()){
        int curr= temp.top();
        temp.pop();
        st.push(curr);
    }
}
void removeFromBottomUsingRecursion(stack<int> &st){
    // base case
    if(st.size()==1){
        st.pop();
        return;
    }
    int curr= st.top();
    st.pop();
    removeFromBottomUsingRecursion(st);
    st.push(curr);
}
void reverseStack(stack<int>& st){
    stack<int> temp;
    while(!st.empty()){
        int curr= st.top();
        st.pop();
        temp.push(curr);
    }
    // printing the reverse (temp) stack
    while(!temp.empty()){
        int curr= temp.top();
        cout<<curr<<" ";
        temp.pop();
    }
}
void reverseAStack(stack<int>& stack){
    // base case
    if(stack.empty()){
        return;
    }
    int curr= stack.top();
    stack.pop();
    reverseAStack(stack);
    // yeh kyu hai tum samaj gye hoge
    insertAtBottom(stack,curr);

}
int main()
{
    // stack data structure
    // What is stack?
    // A stack is a special tupe of data structures where elemenst are added and removed from the same en. It workd like a stack of plates- you can only add or remove the top one first
    // 2Ô∏è‚É£ What are the two main operations in a stack?
    // Puch(top add an elemenst ) and pop(to remove tge elemenst )
    // 3Ô∏è‚É£ Which data structure principle does a stack follow?
    // LIFO ->(last in first out) The last elemenst is added the first one remove
    // 4Ô∏è‚É£ What is the time complexity of push and pop operations in a stack?
    // The time complexity of push and pop is o(1),meaning super fast
    // 5Ô∏è‚É£ Can a stack be implemented using an array?
    // Yes stack is implemented using array
    // 6Ô∏è‚É£ Write a simple C++ program to implement a stack using an array.
    // 7Ô∏è‚É£ How can a stack be implemented using a linked list?
    // Istead of array we can use linkedlist ,where each nodes contains a value and a pointer to nest node.The top of the stack is always the head of linkedlist.

    // 8Ô∏è‚É£ What happens when we try to pop an element from an empty stack?
    // the stack is empty , so there's nothing to remove .Thisis called stack underflow.

    // 9Ô∏è‚É£ What is stack overflow and underflow?
    // stack overflow happens when you push too many elemenst and exeed the stack size;
    // stack underflow happen ehrn you pop from an elemsnt an empty stack.

    // üîü How is a stack used in function calls (recursion)?
    // every function call is stored in a stack.wen a function finished ,it gets poped from the stack .This is how recursion works.

    //
}
